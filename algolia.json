[{"author":null,"categories":["tech"],"content":"","date":1678615481,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1300,"html":"","keywords":["alan","zhan","blog","kubernetes","terraform","private","cluster","GKE","私有","建立"],"kind":"page","lang":"en","lastmod":1678615481,"objectID":"0f69711c80eb171bcabb29c6c34618a8","permalink":"https://alanzhan.dev/post/2023-03-12-terraform-private-gke/","publishdate":"2023-03-12T18:04:41+08:00","readingtime":3,"relpermalink":"/post/2023-03-12-terraform-private-gke/","section":"post","summary":"讓我們一起來花個十分鐘，我會手把手地教你使用 Terraform ，建立私有的 GKE Cluster ！ 設定 GCP 建立 Service Account 首先我們會需要先到 Google Cloud 的頁面上，建立一個 Service Account 給 Terraform 使用，位置可以","tags":["kubernetes","terraform","tech"],"title":"透過 Terraform 建立私有 GKE Cluster","type":"post","url":"/post/2023-03-12-terraform-private-gke/","weight":0,"wordcount":1219},{"author":null,"categories":["reading"],"content":"","date":1664713253,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3800,"html":"","keywords":["alan","zhan","blog","閱讀","心得","終身","成長","lifelong","growth","固定型","成長型","思維"],"kind":"page","lang":"en","lastmod":1664713253,"objectID":"b848fa248196995148325e663ed056fc","permalink":"https://alanzhan.dev/post/2022-10-02-lifelong-growth/","publishdate":"2022-10-02T20:20:53+08:00","readingtime":8,"relpermalink":"/post/2022-10-02-lifelong-growth/","section":"post","summary":"思維模式 你今天去上了一門對你來說是很重要的課程，而且你非常喜歡這門課。你的教授公佈了期中考的考試成績，然而你考試的成績只獲得了 60 分。你非常的","tags":["reading"],"title":"終身成長","type":"post","url":"/post/2022-10-02-lifelong-growth/","weight":0,"wordcount":3725},{"author":null,"categories":["tech"],"content":"","date":1661864168,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3100,"html":"","keywords":["alan","zhan","blog","kubernetes","kubelet","pod","nod","syncloop","flow","worknode","eviction","cAdvisor"],"kind":"page","lang":"en","lastmod":1661864168,"objectID":"694501ca0bb58caa61d05fc3e2ee9210","permalink":"https://alanzhan.dev/post/2022-08-30-kubernetes-kubelet/","publishdate":"2022-08-30T20:56:08+08:00","readingtime":6,"relpermalink":"/post/2022-08-30-kubernetes-kubelet/","section":"post","summary":"Kubelet 架構 如下 kubelet 內部組件結構圖所示，Kubelet 由許多內部組件構成： Kubelet API，包括 10250 port 的認證 API、4194 port 的 cAdvisor API、10255 port 的只讀 API","tags":["kubernetes","tech"],"title":"Kubernetes 核心介紹 Kubelet","type":"post","url":"/post/2022-08-30-kubernetes-kubelet/","weight":0,"wordcount":3002},{"author":null,"categories":["algorithm"],"content":"","date":1661667775,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","25","reverse","nodes","k","group","hard"],"kind":"page","lang":"en","lastmod":1661667775,"objectID":"98c4d71b726f53fa2a8066e0831e2bfb","permalink":"https://alanzhan.dev/post/2022-08-28-leetcode-25/","publishdate":"2022-08-28T14:22:55+08:00","readingtime":1,"relpermalink":"/post/2022-08-28-leetcode-25/","section":"post","summary":"25. Reverse Nodes in k-Group https://leetcode.com/problems/reverse-nodes-in-k-group/ 題意 有一個 Linked List ，將 k 個節點為一組，並且將這一組內部的元素進行反轉，如果節點總數不足 k 個就不用反轉，最後回傳反轉後的結果。 解題思路","tags":["algorithm","leetcode","leetcode-hard"],"title":"白話解 Leetcode - 25 Reverse Nodes in k-Group","type":"post","url":"/post/2022-08-28-leetcode-25/","weight":0,"wordcount":348},{"author":null,"categories":["reading"],"content":null,"date":1660459266,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2400,"html":null,"keywords":["alan","zhan","blog","閱讀","心得","reading","阿甘","投資法","指數","股票","科斯托蘭尼","巴菲特","2016","股東信","指數"],"kind":"page","lang":"en","lastmod":1660459266,"objectID":"e22ff5000b52b8516fb1d82e9bc5beae","permalink":"https://alanzhan.dev/post/2022-08-14-forrest-gump-invest/","publishdate":"2022-08-14T14:41:06+08:00","readingtime":5,"relpermalink":"/post/2022-08-14-forrest-gump-invest/","section":"post","summary":"還記得我大概在三年前，當時的我是一位股市小白，我剛才了解完畢台灣股市之後，就隨即投入股市交易，當時買的第一張股票是 中信金 2891 ，這個代碼還記得清","tags":["reading","invest"],"title":"阿甘投資法","type":"post","url":"/post/2022-08-14-forrest-gump-invest/","weight":0,"wordcount":2361},{"author":null,"categories":["tech"],"content":null,"date":1659182821,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1500,"html":null,"keywords":["alan","zhan","blog","kubernetes","controller","manager","informer","cloud","node","eviction","leader","election"],"kind":"page","lang":"en","lastmod":1659182821,"objectID":"551ac3328d940cfd72f310624682c653","permalink":"https://alanzhan.dev/post/2022-07-30-kubenetes-controller-manager/","publishdate":"2022-07-30T20:07:01+08:00","readingtime":3,"relpermalink":"/post/2022-07-30-kubenetes-controller-manager/","section":"post","summary":"Controller Manager 是 Kubernetes 集群的自動化控制中心，裡面包含了 3X 多個 Controller ，有管理 Pod 相關的、網路相關的、儲存相關的等等。大多數的 Controller 工作模式都差不多，每個 Controller 都是一個 control loop","tags":["kubernetes"],"title":"Kubernetes 核心介紹 Controller Manager","type":"post","url":"/post/2022-07-30-kubenetes-controller-manager/","weight":0,"wordcount":1470},{"author":null,"categories":["algorithm"],"content":"","date":1657722178,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","easy","70","Climbing","Stairs","dp"],"kind":"page","lang":"en","lastmod":1657722178,"objectID":"88f16c7ea6b5d5334d277a5e67921fea","permalink":"https://alanzhan.dev/post/2022-07-13-leetcode-70/","publishdate":"2022-07-13T22:22:58+08:00","readingtime":1,"relpermalink":"/post/2022-07-13-leetcode-70/","section":"post","summary":"70. Climbing Stairs https://leetcode.com/problems/climbing-stairs/ 題意 你在爬樓梯，一次可以爬一階或兩階，請問你有種爬可以爬完？ 解題思路 我們使用動態處理，爬第一階的話，一定是 1 種方法，爬第二階的話，我","tags":["algorithm","leetcode","leetcode-easy","dynamic-programing"],"title":"白話解 Leetcode - 70 Climbing Stairs","type":"post","url":"/post/2022-07-13-leetcode-70/","weight":0,"wordcount":261},{"author":null,"categories":["tech"],"content":"","date":1657448351,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":["alan","zhan","blog","kubernetes","pod","node","gke","cordon","uncordon","delete","PodAntiffinity","drain","維護","故障","轉移"],"kind":"page","lang":"en","lastmod":1657448351,"objectID":"2e6b6ff9acf2bbcd177e52f1e17601df","permalink":"https://alanzhan.dev/post/2022-07-10-kubernetes-cordon-drain/","publishdate":"2022-07-10T18:19:11+08:00","readingtime":2,"relpermalink":"/post/2022-07-10-kubernetes-cordon-drain/","section":"post","summary":"敝公司前陣子有發現有機器的資源使用率特別的低在 GKE 上，再怎麼說這些用不到的資源也是白花花的銀子啊，所以我們就新增資源更低更便宜的 Node Pool ，再搭配使","tags":["kubernetes","tech"],"title":"Kubernetes - Node 維護 Pod 遷移","type":"post","url":"/post/2022-07-10-kubernetes-cordon-drain/","weight":0,"wordcount":720},{"author":null,"categories":["algorithm"],"content":"","date":1656603468,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","easy","69","sqrt","x","binary","search"],"kind":"page","lang":"en","lastmod":1656603468,"objectID":"c502db3f3afe814d67abffaaf650ba9e","permalink":"https://alanzhan.dev/post/2022-06-30-leetcode-69/","publishdate":"2022-06-30T23:37:48+08:00","readingtime":1,"relpermalink":"/post/2022-06-30-leetcode-69/","section":"post","summary":"69. Sqrt(x) https://leetcode.com/problems/sqrtx/ 題意 對 x 開根號後的整數為為多少？ 解題思路 我們來使用二分搜尋法，讓左右邊界快速縮減，透過 mid 的次方，就可以知道 x 的根號會落在哪邊了，今天程","tags":["algorithm","leetcode","leetcode-easy"],"title":"白話解 Leetcode - 69 Sqrt(x)","type":"post","url":"/post/2022-06-30-leetcode-69/","weight":0,"wordcount":213},{"author":null,"categories":["algorithm"],"content":"","date":1656431743,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":700,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","medium","433","minimum","genetic","mutation"],"kind":"page","lang":"en","lastmod":1656431743,"objectID":"f7c17983cd0b76a93803e2a940cd5cbe","permalink":"https://alanzhan.dev/post/2022-06-28-leetcode-433/","publishdate":"2022-06-28T23:55:43+08:00","readingtime":2,"relpermalink":"/post/2022-06-28-leetcode-433/","section":"post","summary":"433. Minimum Genetic Mutation https://leetcode.com/problems/minimum-genetic-mutation/ 題意 每一段字串代表一個基因序列，基因在變化的時候，每次只會變化一個字，只要變化的過程以及變化結束的時候，都在 bank 庫中找得到就好，最後","tags":["algorithm","leetcode","leetcode-medium"],"title":"白話解 Leetcode - 433 Minimum Genetic Mutation","type":"post","url":"/post/2022-06-28-leetcode-433/","weight":0,"wordcount":613},{"author":null,"categories":["algorithm"],"content":"","date":1656170986,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","hard","recursive","23","merge","k","sorted","lists"],"kind":"page","lang":"en","lastmod":1656170986,"objectID":"45891f1784d043f552868953613bfd49","permalink":"https://alanzhan.dev/post/2022-06-25-leetcode-23/","publishdate":"2022-06-25T23:29:46+08:00","readingtime":1,"relpermalink":"/post/2022-06-25-leetcode-23/","section":"post","summary":"23. Merge k Sorted Lists https://leetcode.com/problems/merge-k-sorted-lists/ 題意 將 k 個已經排好順序的 linked list 合併成為一個排好序的 list。 解題思路 如果一個一個合併匯總成一個 list ，這樣暴力破解，相當的的沒效率，所","tags":["algorithm","leetcode","leetcode-hard"],"title":"白話解 Leetcode - 23  Merge k Sorted Lists","type":"post","url":"/post/2022-06-25-leetcode-23/","weight":0,"wordcount":463},{"author":null,"categories":["algorithm"],"content":"","date":1655999413,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","medium","recursive","200","islands","number"],"kind":"page","lang":"en","lastmod":1655999413,"objectID":"924f1547da6098c71b5cdcae2c5357e9","permalink":"https://alanzhan.dev/post/2022-06-23-leetcode-200/","publishdate":"2022-06-23T23:50:13+08:00","readingtime":1,"relpermalink":"/post/2022-06-23-leetcode-200/","section":"post","summary":"200. Number of Islands https://leetcode.com/problems/number-of-islands/ 題意 給你一個二維的陣列， 1 代表陸地， 0 代表是水，島嶼四面環水，島嶼是由上下左右連接組合而成的，請問這個二維陣列中有幾個島嶼？ 解題思","tags":["algorithm","leetcode","leetcode-medium"],"title":"白話解 Leetcode - 200 Number of Islands","type":"post","url":"/post/2022-06-23-leetcode-200/","weight":0,"wordcount":403},{"author":null,"categories":["algorithm"],"content":"","date":1655719200,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","78","subsets","recursive","dfs","medium"],"kind":"page","lang":"en","lastmod":1655719200,"objectID":"81c4e183c44e0134f78fb9ca34aa8a91","permalink":"https://alanzhan.dev/post/2022-06-20-leetcode-78/","publishdate":"2022-06-20T18:00:00+08:00","readingtime":1,"relpermalink":"/post/2022-06-20-leetcode-78/","section":"post","summary":"78. Subsets https://leetcode.com/problems/subsets/ 題意 傳入一個數值陣列，將元素與元素之間的所有有可能發生的組合回傳。 解題思路 可以把每個元素想像為取或者不取，如果取了就把元素塞入 stack 中，如","tags":["algorithm","leetcode","leetcode-medium"],"title":"白話解 Leetcode - 78 Subsets","type":"post","url":"/post/2022-06-20-leetcode-78/","weight":0,"wordcount":387},{"author":null,"categories":["algorithm"],"content":"","date":1655373600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","111","minimum","depth","binary","tree","for","loop","easy"],"kind":"page","lang":"en","lastmod":1655373600,"objectID":"24ce7ec27d0ecf3d1ebff062346e57da","permalink":"https://alanzhan.dev/post/2022-06-16-leetcode-111/","publishdate":"2022-06-16T18:00:00+08:00","readingtime":1,"relpermalink":"/post/2022-06-16-leetcode-111/","section":"post","summary":"111. Minimum Depth of Binary Tree https://leetcode.com/problems/minimum-depth-of-binary-tree/ 題意 尋找這棵樹最小的節點，他的深度為何？ 解題思路 這次的題目與 104 Maximum Depth of Binary Tree 相似，這次當然也要使用不同的思路解題，這次就使用迴圈的","tags":["algorithm","leetcode","leetcode-easy"],"title":"白話解 Leetcode - 111 Minimum Depth of Binary Tree","type":"post","url":"/post/2022-06-16-leetcode-111/","weight":0,"wordcount":444},{"author":null,"categories":["algorithm"],"content":"","date":1655200800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","104","maximum","depth","binary","tree","recursive","easy","dfs"],"kind":"page","lang":"en","lastmod":1655200800,"objectID":"133852015257bb9b021e55e05c1ae50c","permalink":"https://alanzhan.dev/post/2022-06-14-leetcode-104/","publishdate":"2022-06-14T18:00:00+08:00","readingtime":1,"relpermalink":"/post/2022-06-14-leetcode-104/","section":"post","summary":"104. Maximum Depth of Binary Tree https://leetcode.com/problems/maximum-depth-of-binary-tree/ 題意 尋找這棵樹最深的節點，他的深度為何？ 解題思路 這次的題目與 226 Invert Binary Tree 相似，這次也採用遞歸的做法，不過思路換一套方法。 一樣把每個","tags":["algorithm","leetcode","leetcode-easy"],"title":"白話解 Leetcode - 104 Maximum Depth of Binary Tree","type":"post","url":"/post/2022-06-14-leetcode-104/","weight":0,"wordcount":385},{"author":null,"categories":["reading"],"content":"","date":1655114400,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1500,"html":"","keywords":["alan","zhan","blog","winners","take","all","贏者","全拿","職場","生存","閱讀","心得"],"kind":"page","lang":"en","lastmod":1655114400,"objectID":"bc60ee734f525b31b51f6f2e420e1718","permalink":"https://alanzhan.dev/post/2022-06-13-winners-take-all/","publishdate":"2022-06-13T18:00:00+08:00","readingtime":3,"relpermalink":"/post/2022-06-13-winners-take-all/","section":"post","summary":"贏者全拿，從字面上的大家應該就會懂了，在我們生活中也時常發生，舉一個最簡單的例子：在民主社會中，每幾年就會有一次總統大選，只有獲得最高票的那","tags":["reading"],"title":"如何在贏者全拿的職場中生存","type":"post","url":"/post/2022-06-13-winners-take-all/","weight":0,"wordcount":1492},{"author":null,"categories":["algorithm"],"content":"","date":1655010104,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":["alan","zhan","blog","golang","白話解","leetcode","226","invert","binary","tree","recursive","easy"],"kind":"page","lang":"en","lastmod":1655010104,"objectID":"6edb735531521a05c54de1f05076c6e4","permalink":"https://alanzhan.dev/post/2022-06-12-leetcode-226/","publishdate":"2022-06-12T13:01:44+08:00","readingtime":1,"relpermalink":"/post/2022-06-12-leetcode-226/","section":"post","summary":"226. Invert Binary Tree https://leetcode.com/problems/invert-binary-tree/ 題意 將整棵樹的所有左右節點互相對調。 解題思路 我們可以把每個節點都視為是一個 root 節後，然後遍例所有的 root 節點，並且將每個 root 節點的左右節點","tags":["algorithm","leetcode","leetcode-easy"],"title":"白話解 Leetcode - 226 Invert Binary Tree","type":"post","url":"/post/2022-06-12-leetcode-226/","weight":0,"wordcount":273},{"author":null,"categories":["tech"],"content":"","date":1652712048,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1900,"html":"","keywords":["alan","zhan","blog","scheduler","controller","affinity","antiaffinity","predicate","priority","bind","nodeaffinity","podeaffinity","taints","tolerations","priorityclass"],"kind":"page","lang":"en","lastmod":1652712048,"objectID":"aea3d3518b9202ed8bb6ce5cb41501f1","permalink":"https://alanzhan.dev/post/2022-05-16-kubernetes-scheduler/","publishdate":"2022-05-16T22:40:48+08:00","readingtime":4,"relpermalink":"/post/2022-05-16-kubernetes-scheduler/","section":"post","summary":"Scheduler 嚴格算起來，算是特殊的 Controller，工作原理與其他控制器無差別。 Scheduler 的特殊職責在於監控當前集群所有未調度的 Pod，並且獲取當前集群的","tags":["kubernetes","tech"],"title":"Kubernetes 核心介紹 Scheduler","type":"post","url":"/post/2022-05-16-kubernetes-scheduler/","weight":0,"wordcount":1800},{"author":null,"categories":["tech"],"content":"","date":1650798432,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3400,"html":"","keywords":["alan","zhan","blog","kubernetes","apiserver","authentication","authorization","admission","mutating","valiating","APF","FlowSchema","PriorityLevelConfiguration"],"kind":"page","lang":"en","lastmod":1650798432,"objectID":"ebd7e5f121683527d2d999a56c5c17f0","permalink":"https://alanzhan.dev/post/2022-04-24-kubernetes-api-server/","publishdate":"2022-04-24T19:07:12+08:00","readingtime":7,"relpermalink":"/post/2022-04-24-kubernetes-api-server/","section":"post","summary":"API Server kube-apiserver 是 Kubernetes 最重要的核心組件之一，主要提供以下功能： 提供集群管理的 REST API ，包括認證、授權、數據檢驗以及集群狀態變更等 認證 Authentication 授權 Authorization 准入 Admission (Mutating \u0026amp; Valiating) 提供","tags":["kubernetes","tech"],"title":"Kubernetes 核心介紹 Api Server","type":"post","url":"/post/2022-04-24-kubernetes-api-server/","weight":0,"wordcount":3399},{"author":null,"categories":["tech"],"content":"","date":1649578750,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1500,"html":"","keywords":["alan","zhan","blog","mongo","mongodb","index","design","設計","使用","指南","best","practice","esr","rule","實踐"],"kind":"page","lang":"en","lastmod":1649578750,"objectID":"2eb307ef73f2dfa6f8dc6c74abbd385b","permalink":"https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/","publishdate":"2022-04-10T16:19:10+08:00","readingtime":3,"relpermalink":"/post/2022-04-10-mongodb-index-best-practice/","section":"post","summary":"自上一篇在實際的 Porduction 發生了 sorted operation oom 的問題之後，才意識到自己對於 mongodb Index 的掌握度沒有那麼高，於是開始餵關鍵字給 google 查了好久才終於整理出一些重點，有一些重","tags":["mongodb","index","tech"],"title":"Mongodb Index 最佳實踐","type":"post","url":"/post/2022-04-10-mongodb-index-best-practice/","weight":0,"wordcount":1499},{"author":null,"categories":["tech"],"content":"","date":1647760275,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1300,"html":"","keywords":["alan","zhan","blog","mongo","mongodb","index","btree","sort","operation","oom","disk"],"kind":"page","lang":"en","lastmod":1647760275,"objectID":"c73440706f6f12e2a083549d16aee047","permalink":"https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/","publishdate":"2022-03-20T15:11:15+08:00","readingtime":3,"relpermalink":"/post/2022-03-20-mongodb-sorted-operation-oom/","section":"post","summary":"這篇應該會是難得的從問題反推回去學習的歷程吧，我得好好記錄紀錄。最近我們的 production 發生了 MongoDB 的 sort 操作的限制，具體訊息如下： MongoDB.Driver.MongoCommandException: Command find failed: Encountered non-retryable error during query :: caused by ::","tags":["mongodb","index","tech"],"title":"MongoDB Sorted Operation OOM","type":"post","url":"/post/2022-03-20-mongodb-sorted-operation-oom/","weight":0,"wordcount":1210},{"author":null,"categories":["tech"],"content":"","date":1646035127,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2500,"html":"","keywords":["alan","zhan","blog","kubernetes","etcd","raft","leader","follower","candidate"],"kind":"page","lang":"en","lastmod":1646035127,"objectID":"3df51d3d5e7d1136fa59007e73e3cc5a","permalink":"https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/","publishdate":"2022-02-28T15:58:47+08:00","readingtime":5,"relpermalink":"/post/2022-02-28-kubetnetes-etcd/","section":"post","summary":"在任何一個系統中，甚麼東西會是最重要的東西呢？答案其實很簡單 : 資料，所以我就從 Kubernetes 的資料庫 etcd 開始學習起！ 什麼是 etcd 呢 etcd 是 CoreOs 基於 Raft 算法開發的分散式","tags":["kubernetes","tech"],"title":"Kubernetes 核心介紹 Etcd","type":"post","url":"/post/2022-02-28-kubetnetes-etcd/","weight":0,"wordcount":2468},{"author":null,"categories":["tech"],"content":"","date":1645340659,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1000,"html":"","keywords":["alan","zhan","blog","kubernetes","cluster","kubeadm","cgroup","docker","flannel"],"kind":"page","lang":"en","lastmod":1645340659,"objectID":"2d714435df03d2fca3f453a310da2e25","permalink":"https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/","publishdate":"2022-02-20T15:04:19+08:00","readingtime":2,"relpermalink":"/post/2022-02-20-reinstall-kubernetes-kubeadm/","section":"post","summary":"想要透過實戰來更了解 K8s ，所以想先自架 K8s cluster，但目前市面上自建 K8s 的方式越來越多種，可以透過 minikube 、 Kubeadm 等等，想說好吧那我就挑 Kubeadm 來裝看看，但","tags":["kubernetes","tech"],"title":"安裝兩次的 Kubernetes Kubeadm","type":"post","url":"/post/2022-02-20-reinstall-kubernetes-kubeadm/","weight":0,"wordcount":996},{"author":null,"categories":["tech"],"content":"","date":1644846520,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1700,"html":"","keywords":["alan","zhan","blog","kubernetes","architecture","k8s","docker","container","deployment","introduction","pod","service","namespace","node"],"kind":"page","lang":"en","lastmod":1644846520,"objectID":"858526377ee0ec3a9aacbaea99cd5f46","permalink":"https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/","publishdate":"2022-02-14T21:48:40+08:00","readingtime":4,"relpermalink":"/post/2022-02-14-kubernetes-introduction/","section":"post","summary":"終於要來好好深入探討 Kubernetes ，因為 Kubernetes 是基於 golang 這門語言開發的，所以在稍早已經先針對 golang 深度研究了，不過對於 Docker 與 container 技術有經有深入研究過了，小弟就就不針對","tags":["kubernetes","tech"],"title":"Kubernetes 基礎介紹","type":"post","url":"/post/2022-02-14-kubernetes-introduction/","weight":0,"wordcount":1625},{"author":null,"categories":["tech"],"content":"","date":1644734529,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":4400,"html":"","keywords":["alan","zhan","blog","k8s","kubernetes","go","golang","memory","management","記憶體","內存","管理","gabage ","collection","垃圾","回收","leak","洩漏","stack","heap","堆","物件","對象","TCMalloc","Java","C#","Nodejs","Javascript","binary","sort","tree","策略","stop","wolrd"],"kind":"page","lang":"en","lastmod":1644734529,"objectID":"4dccee3623b8c267804dbcc8aa0d5d3c","permalink":"https://alanzhan.dev/post/2022-02-13-golang-memory-management/","publishdate":"2022-02-13T14:42:09+08:00","readingtime":9,"relpermalink":"/post/2022-02-13-golang-memory-management/","section":"post","summary":"新的一年又到來了，在這邊祝大家虎頭虎尾，所以這個年還沒過完，我得好好的繼續整理技術文章給大家了，這樣有好的開始！ 上次分析完 Golang Goroutine 與 GMP 原理全面分","tags":["golang","tech","gc"],"title":"Golang 記憶體管理 GC 全面解析","type":"post","url":"/post/2022-02-13-golang-memory-management/","weight":0,"wordcount":4373},{"author":null,"categories":["tech"],"content":"","date":1643027098,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2800,"html":"","keywords":["alan","zhan","blog","k8s","kubernetes","go","golang","gmp","原理","全面","分析","詳解","模型","goroutine","協程","線程","內核態","用戶態"],"kind":"page","lang":"en","lastmod":1643027098,"objectID":"5fe31832b1d485936cbd84825ec8e8a3","permalink":"https://alanzhan.dev/post/2022-01-24-golang-goroutine/","publishdate":"2022-01-24T20:24:58+08:00","readingtime":6,"relpermalink":"/post/2022-01-24-golang-goroutine/","section":"post","summary":"最近在研讀 Kubernetes ，所以得好好地跟 golang 這個語言當朋友，看著看著看到了 goroutine ，但是始終不解 goroutine 是哪來幹嘛、為何而生的？所以我們在開始深入認識 goroutine 之前，我們可能","tags":["golang","tech"],"title":"Golang Goroutine 與 GMP 原理全面分析","type":"post","url":"/post/2022-01-24-golang-goroutine/","weight":0,"wordcount":2734},{"author":null,"categories":["tech"],"content":"","date":1642323315,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1600,"html":"","keywords":["alan","zhan","blog","docker","dockerfile","best","practice","最佳","實踐","十個"],"kind":"page","lang":"en","lastmod":1642323315,"objectID":"821c45d2edb5c1cf37ed36a56b64577e","permalink":"https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/","publishdate":"2022-01-16T16:55:15+08:00","readingtime":4,"relpermalink":"/post/2022-01-16-dockerfile-best-practices/","section":"post","summary":"最近剛好在整理 docker 的技術給自己，剛好看到 dockerfile 的最佳實踐，想順手整理上來，不料看到官方已經有最佳實踐了，那我就順手做做翻譯的工作與添增自己的見解。","tags":["docker","dockerfile","tech"],"title":"10 個 Dockerfile 的最佳實踐","type":"post","url":"/post/2022-01-16-dockerfile-best-practices/","weight":0,"wordcount":1509},{"author":null,"categories":["tech"],"content":"","date":1641711538,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":["alan","zhan","blog","github","domain","custom","客製","自訂","域名"],"kind":"page","lang":"en","lastmod":1641711538,"objectID":"1363232ac5228ca25b463f383888ae39","permalink":"https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/","publishdate":"2022-01-09T14:58:58+08:00","readingtime":1,"relpermalink":"/post/2022-01-09-github-pages-custom-domain/","section":"post","summary":"最近剛好在更換域名，所以順手做一下筆記，也讓大家可以輕鬆上手，設定自己的 Github page 域名。 第一步：購買域名 先去購買自己想要的域名名稱：我是去 Google Domain 購買","tags":["tech"],"title":"Github Pages Custom Domain - Github Blog 自訂域名","type":"post","url":"/post/2022-01-09-github-pages-custom-domain/","weight":0,"wordcount":299},{"author":null,"categories":["algorithm"],"content":"","date":1626184290,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":600,"html":"","keywords":["interpolation","search","algorithm","C#","go","alan","zhan","blog","演算法","插補","搜尋","leetcode"],"kind":"page","lang":"en","lastmod":1626184290,"objectID":"70281e51ea81081a334cfba9c48129a6","permalink":"https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/","publishdate":"2021-07-13T21:51:30+08:00","readingtime":1,"relpermalink":"/post/2021-07-13-interpolation-search-algorithm/","section":"post","summary":"繼續使用猜數字當範例， 1 ~ 100 的數字，但是這次你已經知道結果了，你如果還是繼續使用二元搜尋法，那麼效率不會那麼好，那我們該用甚麼方式解決呢？ 概","tags":["algorithm","leetcode"],"title":"Interpolation Search Algorithm - 插補搜尋法","type":"post","url":"/post/2021-07-13-interpolation-search-algorithm/","weight":0,"wordcount":501},{"author":null,"categories":["algorithm"],"content":"","date":1625986115,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":700,"html":"","keywords":["jump","search","algorithm","C#","go","alan","zhan","blog","演算法","跳躍","搜尋","leetcode"],"kind":"page","lang":"en","lastmod":1625986115,"objectID":"b615ee6c891ff115ff7f56ed49536627","permalink":"https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/","publishdate":"2021-07-11T14:48:35+08:00","readingtime":2,"relpermalink":"/post/2021-07-11-jump-search-alogrithm/","section":"post","summary":"延續猜數字遊戲，1 ~ 100 我們是不是可以換個猜法呢？ 如果我們從一開始，只要每次沒猜中，我們就往後面 +10 繼續猜，直到最大值範圍值變成我們所猜的數值後","tags":["algorithm","leetcode"],"title":"Jump Search Algorithm - 跳躍搜尋法","type":"post","url":"/post/2021-07-11-jump-search-alogrithm/","weight":0,"wordcount":661},{"author":null,"categories":["algorithm"],"content":"","date":1625929057,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":500,"html":"","keywords":["alan","zhan","blog","binary","search","algorithm","C#","go","演算法","二元","搜尋","leetcode"],"kind":"page","lang":"en","lastmod":1625929057,"objectID":"7a56c766fb1cd116367d31bfe64d29a5","permalink":"https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/","publishdate":"2021-07-10T22:57:37+08:00","readingtime":1,"relpermalink":"/post/2021-07-10-binary-search-algorithm/","section":"post","summary":"我們來玩猜數字遊戲，1 ~ 100 中的整數，你必須猜中我腦海中的數字，而且我們必須在最少的布數內猜到答案，那麼你會怎麼猜呢？ 答案很簡單，你一定會從 50","tags":["algorithm","leetcode"],"title":"Binary Search Algorithm - 二元搜尋法","type":"post","url":"/post/2021-07-10-binary-search-algorithm/","weight":0,"wordcount":483},{"author":null,"categories":["algorithm"],"content":"","date":1625914240,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":400,"html":"","keywords":["linear\"","search","algorithm","C#","go","alan","zhan","blog","演算法","線性","搜尋","leetcode"],"kind":"page","lang":"en","lastmod":1625914240,"objectID":"a0d1c6fc703b5e031398e4a8521bfadb","permalink":"https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/","publishdate":"2021-07-10T18:50:40+08:00","readingtime":1,"relpermalink":"/post/2021-07-10-linear-search-algorithm/","section":"post","summary":"在查找一個元素是否存在的時候，我們最常使用的方式是甚麼呢？答案是 for 或者是 while 迴圈，恭喜你！已經學習完 Linear Search 了！ 概念 線性搜尋 (Linear Search)：這個","tags":["algorithm","leetcode"],"title":"Linear Search Algorithm - 線性搜尋法","type":"post","url":"/post/2021-07-10-linear-search-algorithm/","weight":0,"wordcount":302},{"author":null,"categories":["algorithm"],"content":"","date":1625673394,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":300,"html":"","keywords":["algorithm","leetcode","divide","conquer","分而治之","演算法","alan","zhan","blog"],"kind":"page","lang":"en","lastmod":1625673394,"objectID":"4e40dd8159f9be7613ed117a1c09d14b","permalink":"https://alanzhan.dev/post/2021-07-07-divide-and-conquer/","publishdate":"2021-07-07T23:56:34+08:00","readingtime":1,"relpermalink":"/post/2021-07-07-divide-and-conquer/","section":"post","summary":"分而治之 從字面上看起來，就是把一個複雜的問題分解成兩個或者很多個相同或者相似的問題，讓小問題可以被解決，再將最終結果合併求出問題的答案。 優點","tags":["algorithm","leetcode"],"title":"Divide and Conquer - 分而治之","type":"post","url":"/post/2021-07-07-divide-and-conquer/","weight":0,"wordcount":269},{"author":null,"categories":["algorithm"],"content":"","date":1625587018,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":600,"html":"","keywords":["algorithm","leetcode","big","o","符號","演算法","alan","zhan","blog"],"kind":"page","lang":"en","lastmod":1625587018,"objectID":"5731d1e40a0561f32490ac610fa81c9e","permalink":"https://alanzhan.dev/post/2021-07-06-big-o-notation/","publishdate":"2021-07-06T23:56:58+08:00","readingtime":2,"relpermalink":"/post/2021-07-06-big-o-notation/","section":"post","summary":"如何選擇演算法來解決問題 同一個問題可以用不同的演算法來解決問題，但是選擇哪一個最好？有兩個指標可以評估一個算法的好壞： 時間複雜度 (花的時間)","tags":["algorithm","leetcode"],"title":"Big O Notation - Big O 符號","type":"post","url":"/post/2021-07-06-big-o-notation/","weight":0,"wordcount":560},{"author":null,"categories":["Reading"],"content":"","date":1624704412,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2500,"html":"","keywords":["reading","閱讀","心得","情緒","emotional","blackmail","勒索","alan","zhan","blog"],"kind":"page","lang":"en","lastmod":1624704412,"objectID":"6c82041f6d8af0c4e6331a411615b682","permalink":"https://alanzhan.dev/post/2021-06-26-emotional-blackmail/","publishdate":"2021-06-26T18:46:52+08:00","readingtime":5,"relpermalink":"/post/2021-06-26-emotional-blackmail/","section":"post","summary":"什麼是情緒勒索？ 在探討情緒勒索之前，我們得先搞清楚什麼是情緒勒索？ 情緒勒索者可能在有意識或者無意識當中，使用要求、威脅、施壓、沉默等間接或直","tags":["reading"],"title":"Emotional Blackmail - 情緒勒索","type":"post","url":"/post/2021-06-26-emotional-blackmail/","weight":0,"wordcount":2479},{"author":null,"categories":["Reading"],"content":"","date":1623599121,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1200,"html":"","keywords":["reading","閱讀","心得","原子","atomic","habits","習慣","alan","zhan","blog"],"kind":"page","lang":"en","lastmod":1623599121,"objectID":"160bb6bb072a479f032c43bad2c504a5","permalink":"https://alanzhan.dev/post/2021-06-13-atomic-habits/","publishdate":"2021-06-13T23:45:21+08:00","readingtime":3,"relpermalink":"/post/2021-06-13-atomic-habits/","section":"post","summary":"複利 「複利」這個詞貫穿了整部本書，我們可以說它是世界第八大奇蹟，一點也不為過。 你每天只進步 1% ，持續了之後一年 (1.01 ^ 365 = 37.78)，你將進步 37","tags":["reading"],"title":"Atomic Habits - 原子習慣","type":"post","url":"/post/2021-06-13-atomic-habits/","weight":0,"wordcount":1138},{"author":null,"categories":[],"content":null,"date":737222400,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":["about","me","alan","zhan","blog"],"kind":"page","lang":"en","lastmod":737222400,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://alanzhan.dev/about/","publishdate":"1993-05-13T00:00:00+08:00","readingtime":1,"relpermalink":"/about/","section":"","summary":"I have been working as a senior full-stack engineer for 8 years experience. I like to gain new knowledge which can improve my critical thinking and the knowledge can help me solve problems or create value for my work. Hope my passion can create more products that users love and use.\nExperience OpenNet • DevOps Engineer • Oct. 2022 ~ Present Playsee • Backend Engineer • Jun. 2022 ~ Sep. 2022 Higgs • Senior Full Stack Engineer • Apr.","tags":[],"title":"About Me","type":"page","url":"/about/","weight":0,"wordcount":152}]