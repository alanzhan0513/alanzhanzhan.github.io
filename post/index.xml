<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alan Zhan Blog</title>
    <link>https://alanzhan.dev/post/</link>
    <description>Recent content in Posts on Alan Zhan Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Mar 2023 18:04:41 +0800</lastBuildDate><atom:link href="https://alanzhan.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>透過 Terraform 建立私有 GKE Cluster</title>
      <link>https://alanzhan.dev/post/2023-03-12-terraform-private-gke/</link>
      <pubDate>Sun, 12 Mar 2023 18:04:41 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2023-03-12-terraform-private-gke/</guid>
      <description>讓我們一起來花個十分鐘，我會手把手地教你使用 Terraform ，建立私有的 GKE Cluster ！ 設定 GCP 建立 Service Account 首先我們會需要先到 Google Cloud 的頁面上，建立一個 Service Account 給 Terraform 使用，位置可以</description>
    </item>
    
    <item>
      <title>終身成長</title>
      <link>https://alanzhan.dev/post/2022-10-02-lifelong-growth/</link>
      <pubDate>Sun, 02 Oct 2022 20:20:53 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-10-02-lifelong-growth/</guid>
      <description>思維模式 你今天去上了一門對你來說是很重要的課程，而且你非常喜歡這門課。你的教授公佈了期中考的考試成績，然而你考試的成績只獲得了 60 分。你非常的</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Kubelet</title>
      <link>https://alanzhan.dev/post/2022-08-30-kubernetes-kubelet/</link>
      <pubDate>Tue, 30 Aug 2022 20:56:08 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-08-30-kubernetes-kubelet/</guid>
      <description>Kubelet 架構 如下 kubelet 內部組件結構圖所示，Kubelet 由許多內部組件構成： Kubelet API，包括 10250 port 的認證 API、4194 port 的 cAdvisor API、10255 port 的只讀 API</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 25 Reverse Nodes in k-Group</title>
      <link>https://alanzhan.dev/post/2022-08-28-leetcode-25/</link>
      <pubDate>Sun, 28 Aug 2022 14:22:55 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-08-28-leetcode-25/</guid>
      <description>25. Reverse Nodes in k-Group https://leetcode.com/problems/reverse-nodes-in-k-group/ 題意 有一個 Linked List ，將 k 個節點為一組，並且將這一組內部的元素進行反轉，如果節點總數不足 k 個就不用反轉，最後回傳反轉後的結果。 解題思路</description>
    </item>
    
    <item>
      <title>阿甘投資法</title>
      <link>https://alanzhan.dev/post/2022-08-14-forrest-gump-invest/</link>
      <pubDate>Sun, 14 Aug 2022 14:41:06 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-08-14-forrest-gump-invest/</guid>
      <description>還記得我大概在三年前，當時的我是一位股市小白，我剛才了解完畢台灣股市之後，就隨即投入股市交易，當時買的第一張股票是 中信金 2891 ，這個代碼還記得清</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Controller Manager</title>
      <link>https://alanzhan.dev/post/2022-07-30-kubenetes-controller-manager/</link>
      <pubDate>Sat, 30 Jul 2022 20:07:01 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-07-30-kubenetes-controller-manager/</guid>
      <description>Controller Manager 是 Kubernetes 集群的自動化控制中心，裡面包含了 3X 多個 Controller ，有管理 Pod 相關的、網路相關的、儲存相關的等等。大多數的 Controller 工作模式都差不多，每個 Controller 都是一個 control loop</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 70 Climbing Stairs</title>
      <link>https://alanzhan.dev/post/2022-07-13-leetcode-70/</link>
      <pubDate>Wed, 13 Jul 2022 22:22:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-07-13-leetcode-70/</guid>
      <description>70. Climbing Stairs https://leetcode.com/problems/climbing-stairs/ 題意 你在爬樓梯，一次可以爬一階或兩階，請問你有種爬可以爬完？ 解題思路 我們使用動態處理，爬第一階的話，一定是 1 種方法，爬第二階的話，我</description>
    </item>
    
    <item>
      <title>Kubernetes - Node 維護 Pod 遷移</title>
      <link>https://alanzhan.dev/post/2022-07-10-kubernetes-cordon-drain/</link>
      <pubDate>Sun, 10 Jul 2022 18:19:11 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-07-10-kubernetes-cordon-drain/</guid>
      <description>敝公司前陣子有發現有機器的資源使用率特別的低在 GKE 上，再怎麼說這些用不到的資源也是白花花的銀子啊，所以我們就新增資源更低更便宜的 Node Pool ，再搭配使</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 69 Sqrt(x)</title>
      <link>https://alanzhan.dev/post/2022-06-30-leetcode-69/</link>
      <pubDate>Thu, 30 Jun 2022 23:37:48 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-30-leetcode-69/</guid>
      <description>69. Sqrt(x) https://leetcode.com/problems/sqrtx/ 題意 對 x 開根號後的整數為為多少？ 解題思路 我們來使用二分搜尋法，讓左右邊界快速縮減，透過 mid 的次方，就可以知道 x 的根號會落在哪邊了，今天程</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 433 Minimum Genetic Mutation</title>
      <link>https://alanzhan.dev/post/2022-06-28-leetcode-433/</link>
      <pubDate>Tue, 28 Jun 2022 23:55:43 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-28-leetcode-433/</guid>
      <description>433. Minimum Genetic Mutation https://leetcode.com/problems/minimum-genetic-mutation/ 題意 每一段字串代表一個基因序列，基因在變化的時候，每次只會變化一個字，只要變化的過程以及變化結束的時候，都在 bank 庫中找得到就好，最後</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 23  Merge k Sorted Lists</title>
      <link>https://alanzhan.dev/post/2022-06-25-leetcode-23/</link>
      <pubDate>Sat, 25 Jun 2022 23:29:46 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-25-leetcode-23/</guid>
      <description>23. Merge k Sorted Lists https://leetcode.com/problems/merge-k-sorted-lists/ 題意 將 k 個已經排好順序的 linked list 合併成為一個排好序的 list。 解題思路 如果一個一個合併匯總成一個 list ，這樣暴力破解，相當的的沒效率，所</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 200 Number of Islands</title>
      <link>https://alanzhan.dev/post/2022-06-23-leetcode-200/</link>
      <pubDate>Thu, 23 Jun 2022 23:50:13 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-23-leetcode-200/</guid>
      <description>200. Number of Islands https://leetcode.com/problems/number-of-islands/ 題意 給你一個二維的陣列， 1 代表陸地， 0 代表是水，島嶼四面環水，島嶼是由上下左右連接組合而成的，請問這個二維陣列中有幾個島嶼？ 解題思</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 78 Subsets</title>
      <link>https://alanzhan.dev/post/2022-06-20-leetcode-78/</link>
      <pubDate>Mon, 20 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-20-leetcode-78/</guid>
      <description>78. Subsets https://leetcode.com/problems/subsets/ 題意 傳入一個數值陣列，將元素與元素之間的所有有可能發生的組合回傳。 解題思路 可以把每個元素想像為取或者不取，如果取了就把元素塞入 stack 中，如</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 111 Minimum Depth of Binary Tree</title>
      <link>https://alanzhan.dev/post/2022-06-16-leetcode-111/</link>
      <pubDate>Thu, 16 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-16-leetcode-111/</guid>
      <description>111. Minimum Depth of Binary Tree https://leetcode.com/problems/minimum-depth-of-binary-tree/ 題意 尋找這棵樹最小的節點，他的深度為何？ 解題思路 這次的題目與 104 Maximum Depth of Binary Tree 相似，這次當然也要使用不同的思路解題，這次就使用迴圈的</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 104 Maximum Depth of Binary Tree</title>
      <link>https://alanzhan.dev/post/2022-06-14-leetcode-104/</link>
      <pubDate>Tue, 14 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-14-leetcode-104/</guid>
      <description>104. Maximum Depth of Binary Tree https://leetcode.com/problems/maximum-depth-of-binary-tree/ 題意 尋找這棵樹最深的節點，他的深度為何？ 解題思路 這次的題目與 226 Invert Binary Tree 相似，這次也採用遞歸的做法，不過思路換一套方法。 一樣把每個</description>
    </item>
    
    <item>
      <title>如何在贏者全拿的職場中生存</title>
      <link>https://alanzhan.dev/post/2022-06-13-winners-take-all/</link>
      <pubDate>Mon, 13 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-13-winners-take-all/</guid>
      <description>贏者全拿，從字面上的大家應該就會懂了，在我們生活中也時常發生，舉一個最簡單的例子：在民主社會中，每幾年就會有一次總統大選，只有獲得最高票的那</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 226 Invert Binary Tree</title>
      <link>https://alanzhan.dev/post/2022-06-12-leetcode-226/</link>
      <pubDate>Sun, 12 Jun 2022 13:01:44 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-12-leetcode-226/</guid>
      <description>226. Invert Binary Tree https://leetcode.com/problems/invert-binary-tree/ 題意 將整棵樹的所有左右節點互相對調。 解題思路 我們可以把每個節點都視為是一個 root 節後，然後遍例所有的 root 節點，並且將每個 root 節點的左右節點</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Scheduler</title>
      <link>https://alanzhan.dev/post/2022-05-16-kubernetes-scheduler/</link>
      <pubDate>Mon, 16 May 2022 22:40:48 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-05-16-kubernetes-scheduler/</guid>
      <description>Scheduler 嚴格算起來，算是特殊的 Controller，工作原理與其他控制器無差別。 Scheduler 的特殊職責在於監控當前集群所有未調度的 Pod，並且獲取當前集群的</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Api Server</title>
      <link>https://alanzhan.dev/post/2022-04-24-kubernetes-api-server/</link>
      <pubDate>Sun, 24 Apr 2022 19:07:12 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-04-24-kubernetes-api-server/</guid>
      <description>API Server kube-apiserver 是 Kubernetes 最重要的核心組件之一，主要提供以下功能： 提供集群管理的 REST API ，包括認證、授權、數據檢驗以及集群狀態變更等 認證 Authentication 授權 Authorization 准入 Admission (Mutating &amp;amp; Valiating) 提供</description>
    </item>
    
    <item>
      <title>Mongodb Index 最佳實踐</title>
      <link>https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/</link>
      <pubDate>Sun, 10 Apr 2022 16:19:10 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/</guid>
      <description>自上一篇在實際的 Porduction 發生了 sorted operation oom 的問題之後，才意識到自己對於 mongodb Index 的掌握度沒有那麼高，於是開始餵關鍵字給 google 查了好久才終於整理出一些重點，有一些重</description>
    </item>
    
    <item>
      <title>MongoDB Sorted Operation OOM</title>
      <link>https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/</link>
      <pubDate>Sun, 20 Mar 2022 15:11:15 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/</guid>
      <description>這篇應該會是難得的從問題反推回去學習的歷程吧，我得好好記錄紀錄。最近我們的 production 發生了 MongoDB 的 sort 操作的限制，具體訊息如下： MongoDB.Driver.MongoCommandException: Command find failed: Encountered non-retryable error during query :: caused by ::</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Etcd</title>
      <link>https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/</link>
      <pubDate>Mon, 28 Feb 2022 15:58:47 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/</guid>
      <description>在任何一個系統中，甚麼東西會是最重要的東西呢？答案其實很簡單 : 資料，所以我就從 Kubernetes 的資料庫 etcd 開始學習起！ 什麼是 etcd 呢 etcd 是 CoreOs 基於 Raft 算法開發的分散式</description>
    </item>
    
    <item>
      <title>安裝兩次的 Kubernetes Kubeadm</title>
      <link>https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/</link>
      <pubDate>Sun, 20 Feb 2022 15:04:19 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/</guid>
      <description>想要透過實戰來更了解 K8s ，所以想先自架 K8s cluster，但目前市面上自建 K8s 的方式越來越多種，可以透過 minikube 、 Kubeadm 等等，想說好吧那我就挑 Kubeadm 來裝看看，但</description>
    </item>
    
    <item>
      <title>Kubernetes 基礎介紹</title>
      <link>https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/</link>
      <pubDate>Mon, 14 Feb 2022 21:48:40 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/</guid>
      <description>終於要來好好深入探討 Kubernetes ，因為 Kubernetes 是基於 golang 這門語言開發的，所以在稍早已經先針對 golang 深度研究了，不過對於 Docker 與 container 技術有經有深入研究過了，小弟就就不針對</description>
    </item>
    
    <item>
      <title>Golang 記憶體管理 GC 全面解析</title>
      <link>https://alanzhan.dev/post/2022-02-13-golang-memory-management/</link>
      <pubDate>Sun, 13 Feb 2022 14:42:09 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-13-golang-memory-management/</guid>
      <description>新的一年又到來了，在這邊祝大家虎頭虎尾，所以這個年還沒過完，我得好好的繼續整理技術文章給大家了，這樣有好的開始！ 上次分析完 Golang Goroutine 與 GMP 原理全面分</description>
    </item>
    
    <item>
      <title>Golang Goroutine 與 GMP 原理全面分析</title>
      <link>https://alanzhan.dev/post/2022-01-24-golang-goroutine/</link>
      <pubDate>Mon, 24 Jan 2022 20:24:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-24-golang-goroutine/</guid>
      <description>最近在研讀 Kubernetes ，所以得好好地跟 golang 這個語言當朋友，看著看著看到了 goroutine ，但是始終不解 goroutine 是哪來幹嘛、為何而生的？所以我們在開始深入認識 goroutine 之前，我們可能</description>
    </item>
    
    <item>
      <title>10 個 Dockerfile 的最佳實踐</title>
      <link>https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/</link>
      <pubDate>Sun, 16 Jan 2022 16:55:15 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/</guid>
      <description>最近剛好在整理 docker 的技術給自己，剛好看到 dockerfile 的最佳實踐，想順手整理上來，不料看到官方已經有最佳實踐了，那我就順手做做翻譯的工作與添增自己的見解。</description>
    </item>
    
    <item>
      <title>Github Pages Custom Domain - Github Blog 自訂域名</title>
      <link>https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/</link>
      <pubDate>Sun, 09 Jan 2022 14:58:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/</guid>
      <description>最近剛好在更換域名，所以順手做一下筆記，也讓大家可以輕鬆上手，設定自己的 Github page 域名。 第一步：購買域名 先去購買自己想要的域名名稱：我是去 Google Domain 購買</description>
    </item>
    
    <item>
      <title>Interpolation Search Algorithm - 插補搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/</link>
      <pubDate>Tue, 13 Jul 2021 21:51:30 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/</guid>
      <description>繼續使用猜數字當範例， 1 ~ 100 的數字，但是這次你已經知道結果了，你如果還是繼續使用二元搜尋法，那麼效率不會那麼好，那我們該用甚麼方式解決呢？ 概</description>
    </item>
    
    <item>
      <title>Jump Search Algorithm - 跳躍搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/</link>
      <pubDate>Sun, 11 Jul 2021 14:48:35 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/</guid>
      <description>延續猜數字遊戲，1 ~ 100 我們是不是可以換個猜法呢？ 如果我們從一開始，只要每次沒猜中，我們就往後面 +10 繼續猜，直到最大值範圍值變成我們所猜的數值後</description>
    </item>
    
    <item>
      <title>Binary Search Algorithm - 二元搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/</link>
      <pubDate>Sat, 10 Jul 2021 22:57:37 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/</guid>
      <description>我們來玩猜數字遊戲，1 ~ 100 中的整數，你必須猜中我腦海中的數字，而且我們必須在最少的布數內猜到答案，那麼你會怎麼猜呢？ 答案很簡單，你一定會從 50</description>
    </item>
    
    <item>
      <title>Linear Search Algorithm - 線性搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/</link>
      <pubDate>Sat, 10 Jul 2021 18:50:40 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/</guid>
      <description>在查找一個元素是否存在的時候，我們最常使用的方式是甚麼呢？答案是 for 或者是 while 迴圈，恭喜你！已經學習完 Linear Search 了！ 概念 線性搜尋 (Linear Search)：這個</description>
    </item>
    
    <item>
      <title>Divide and Conquer - 分而治之</title>
      <link>https://alanzhan.dev/post/2021-07-07-divide-and-conquer/</link>
      <pubDate>Wed, 07 Jul 2021 23:56:34 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-07-divide-and-conquer/</guid>
      <description>分而治之 從字面上看起來，就是把一個複雜的問題分解成兩個或者很多個相同或者相似的問題，讓小問題可以被解決，再將最終結果合併求出問題的答案。 優點</description>
    </item>
    
    <item>
      <title>Big O Notation - Big O 符號</title>
      <link>https://alanzhan.dev/post/2021-07-06-big-o-notation/</link>
      <pubDate>Tue, 06 Jul 2021 23:56:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-06-big-o-notation/</guid>
      <description>如何選擇演算法來解決問題 同一個問題可以用不同的演算法來解決問題，但是選擇哪一個最好？有兩個指標可以評估一個算法的好壞： 時間複雜度 (花的時間)</description>
    </item>
    
    <item>
      <title>Emotional Blackmail - 情緒勒索</title>
      <link>https://alanzhan.dev/post/2021-06-26-emotional-blackmail/</link>
      <pubDate>Sat, 26 Jun 2021 18:46:52 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-06-26-emotional-blackmail/</guid>
      <description>什麼是情緒勒索？ 在探討情緒勒索之前，我們得先搞清楚什麼是情緒勒索？ 情緒勒索者可能在有意識或者無意識當中，使用要求、威脅、施壓、沉默等間接或直</description>
    </item>
    
    <item>
      <title>Atomic Habits - 原子習慣</title>
      <link>https://alanzhan.dev/post/2021-06-13-atomic-habits/</link>
      <pubDate>Sun, 13 Jun 2021 23:45:21 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-06-13-atomic-habits/</guid>
      <description>複利 「複利」這個詞貫穿了整部本書，我們可以說它是世界第八大奇蹟，一點也不為過。 你每天只進步 1% ，持續了之後一年 (1.01 ^ 365 = 37.78)，你將進步 37</description>
    </item>
    
  </channel>
</rss>
