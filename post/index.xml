<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alan 的筆記本</title>
    <link>https://alanzhan.dev/post/</link>
    <description>Recent content in Posts on Alan 的筆記本</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 12 Mar 2023 18:04:41 +0800</lastBuildDate><atom:link href="https://alanzhan.dev/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>透過 Terraform 建立私有 GKE Cluster</title>
      <link>https://alanzhan.dev/post/2023-03-12-terraform-private-gke/</link>
      <pubDate>Sun, 12 Mar 2023 18:04:41 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2023-03-12-terraform-private-gke/</guid>
      <description>讓我們一起來花個十分鐘，我會手把手地教你使用 Terraform ，建立私有的 GKE Cluster ！ 設定 GCP 建立 Service Account 首先我們會需要先到 Google Cloud 的頁面上，建立一個 Service Account 給 Terraform 使用，位置可以</description>
    </item>
    
    <item>
      <title>終身成長</title>
      <link>https://alanzhan.dev/post/2022-10-02-lifelong-growth/</link>
      <pubDate>Sun, 02 Oct 2022 20:20:53 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-10-02-lifelong-growth/</guid>
      <description>思維模式 你今天去上了一門對你來說是很重要的課程，而且你非常喜歡這門課。你的教授公佈了期中考的考試成績，然而你考試的成績只獲得了 60 分。你非常的</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Kubelet</title>
      <link>https://alanzhan.dev/post/2022-08-30-kubernetes-kubelet/</link>
      <pubDate>Tue, 30 Aug 2022 20:56:08 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-08-30-kubernetes-kubelet/</guid>
      <description>Kubelet 架構 如下 kubelet 內部組件結構圖所示，Kubelet 由許多內部組件構成： Kubelet API，包括 10250 port 的認證 API、4194 port 的 cAdvisor API、10255 port 的只讀 API</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 25 Reverse Nodes in k-Group</title>
      <link>https://alanzhan.dev/post/2022-08-28-leetcode-25/</link>
      <pubDate>Sun, 28 Aug 2022 14:22:55 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-08-28-leetcode-25/</guid>
      <description>25. Reverse Nodes in k-Group https://leetcode.com/problems/reverse-nodes-in-k-group/ HardGiven the head of a linked list, reverse the nodes of the list k at a time, and return the modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is. You may</description>
    </item>
    
    <item>
      <title>阿甘投資法</title>
      <link>https://alanzhan.dev/post/2022-08-14-forrest-gump-invest/</link>
      <pubDate>Sun, 14 Aug 2022 14:41:06 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-08-14-forrest-gump-invest/</guid>
      <description>還記得我大概在三年前，當時的我是一位股市小白，我剛才了解完畢台灣股市之後，就隨即投入股市交易，當時買的第一張股票是 中信金 2891 ，這個代碼還記得清</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Controller Manager</title>
      <link>https://alanzhan.dev/post/2022-07-30-kubenetes-controller-manager/</link>
      <pubDate>Sat, 30 Jul 2022 20:07:01 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-07-30-kubenetes-controller-manager/</guid>
      <description>Controller Manager 是 Kubernetes 集群的自動化控制中心，裡面包含了 3X 多個 Controller ，有管理 Pod 相關的、網路相關的、儲存相關的等等。大多數的 Controller 工作模式都差不多，每個 Controller 都是一個 control loop</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 70 Climbing Stairs</title>
      <link>https://alanzhan.dev/post/2022-07-13-leetcode-70/</link>
      <pubDate>Wed, 13 Jul 2022 22:22:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-07-13-leetcode-70/</guid>
      <description>70. Climbing Stairs https://leetcode.com/problems/climbing-stairs/ EasyYou are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? &amp;nbsp; Example 1: Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: n</description>
    </item>
    
    <item>
      <title>Kubernetes - Node 維護 Pod 遷移</title>
      <link>https://alanzhan.dev/post/2022-07-10-kubernetes-cordon-drain/</link>
      <pubDate>Sun, 10 Jul 2022 18:19:11 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-07-10-kubernetes-cordon-drain/</guid>
      <description>敝公司前陣子有發現有機器的資源使用率特別的低在 GKE 上，再怎麼說這些用不到的資源也是白花花的銀子啊，所以我們就新增資源更低更便宜的 Node Pool ，再搭配使</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 69 Sqrt(x)</title>
      <link>https://alanzhan.dev/post/2022-06-30-leetcode-69/</link>
      <pubDate>Thu, 30 Jun 2022 23:37:48 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-30-leetcode-69/</guid>
      <description>69. Sqrt(x) https://leetcode.com/problems/sqrtx/ EasyGiven a non-negative integer x,&amp;nbsp;compute and return the square root of x. Since the return type&amp;nbsp;is an integer, the decimal digits are truncated, and only the integer part of the result&amp;nbsp;is returned. Note:&amp;nbsp;You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or&amp;nbsp;x ** 0.5. &amp;nbsp; Example 1: Input: x = 4 Output: 2 Example 2: Input: x = 8 Output:</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 433 Minimum Genetic Mutation</title>
      <link>https://alanzhan.dev/post/2022-06-28-leetcode-433/</link>
      <pubDate>Tue, 28 Jun 2022 23:55:43 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-28-leetcode-433/</guid>
      <description>433. Minimum Genetic Mutation https://leetcode.com/problems/minimum-genetic-mutation/ MediumA gene string can be represented by an 8-character long string, with choices from &#39;A&#39;, &#39;C&#39;, &#39;G&#39;, and &#39;T&#39;. Suppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string. For example, &#34;AACCGGTT&#34; --&amp;gt; &#34;AACCGGTA&#34; is one mutation. There is also a gene bank bank</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 23  Merge k Sorted Lists</title>
      <link>https://alanzhan.dev/post/2022-06-25-leetcode-23/</link>
      <pubDate>Sat, 25 Jun 2022 23:29:46 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-25-leetcode-23/</guid>
      <description>23. Merge k Sorted Lists https://leetcode.com/problems/merge-k-sorted-lists/ HardYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it. &amp;nbsp; Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [ 1-&amp;gt;4-&amp;gt;5, 1-&amp;gt;3-&amp;gt;4, 2-&amp;gt;6 ] merging them into one sorted list: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5-&amp;gt;6 Example 2: Input: lists = [] Output: [] Example 3: Input: lists</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 200 Number of Islands</title>
      <link>https://alanzhan.dev/post/2022-06-23-leetcode-200/</link>
      <pubDate>Thu, 23 Jun 2022 23:50:13 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-23-leetcode-200/</guid>
      <description>200. Number of Islands https://leetcode.com/problems/number-of-islands/ MediumGiven an m x n 2D binary grid grid which represents a map of &#39;1&#39;s (land) and &#39;0&#39;s (water), return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. &amp;nbsp; Example 1: Input: grid = [ [&#34;1&#34;,&#34;1&#34;,&#34;1&#34;,&#34;1&#34;,&#34;0&#34;], [&#34;1&#34;,&#34;1&#34;,&#34;0&#34;,&#34;1&#34;,&#34;0&#34;], [&#34;1&#34;,&#34;1&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;], [&#34;0&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;,&#34;0&#34;]</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 78 Subsets</title>
      <link>https://alanzhan.dev/post/2022-06-20-leetcode-78/</link>
      <pubDate>Mon, 20 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-20-leetcode-78/</guid>
      <description>78. Subsets https://leetcode.com/problems/subsets/ MediumGiven an integer array nums of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. &amp;nbsp; Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]] &amp;nbsp; Constraints: 1 &amp;lt;= nums.length &amp;lt;= 10 -10 &amp;lt;= nums[i] &amp;lt;= 10 All the numbers of&amp;nbsp;nums are unique. 題意 傳</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 111 Minimum Depth of Binary Tree</title>
      <link>https://alanzhan.dev/post/2022-06-16-leetcode-111/</link>
      <pubDate>Thu, 16 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-16-leetcode-111/</guid>
      <description>111. Minimum Depth of Binary Tree https://leetcode.com/problems/minimum-depth-of-binary-tree/ EasyGiven a binary tree, find its minimum depth. The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. Note:&amp;nbsp;A leaf is a node with no children. &amp;nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: 2 Example 2: Input: root = [2,null,3,null,4,null,5,null,6] Output: 5 &amp;nbsp; Constraints: The number of nodes in the</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 104 Maximum Depth of Binary Tree</title>
      <link>https://alanzhan.dev/post/2022-06-14-leetcode-104/</link>
      <pubDate>Tue, 14 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-14-leetcode-104/</guid>
      <description>104. Maximum Depth of Binary Tree https://leetcode.com/problems/maximum-depth-of-binary-tree/ EasyGiven the root of a binary tree, return its maximum depth. A binary tree&#39;s maximum depth&amp;nbsp;is the number of nodes along the longest path from the root node down to the farthest leaf node. &amp;nbsp; Example 1: Input: root = [3,9,20,null,null,15,7] Output: 3 Example 2: Input: root = [1,null,2] Output: 2 &amp;nbsp; Constraints: The number of nodes in the tree is in the</description>
    </item>
    
    <item>
      <title>如何在贏者全拿的職場中生存</title>
      <link>https://alanzhan.dev/post/2022-06-13-winners-take-all/</link>
      <pubDate>Mon, 13 Jun 2022 18:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-13-winners-take-all/</guid>
      <description>贏者全拿，從字面上的大家應該就會懂了，在我們生活中也時常發生，舉一個最簡單的例子：在民主社會中，每幾年就會有一次總統大選，只有獲得最高票的那</description>
    </item>
    
    <item>
      <title>白話解 Leetcode - 226 Invert Binary Tree</title>
      <link>https://alanzhan.dev/post/2022-06-12-leetcode-226/</link>
      <pubDate>Sun, 12 Jun 2022 13:01:44 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-06-12-leetcode-226/</guid>
      <description>226. Invert Binary Tree https://leetcode.com/problems/invert-binary-tree/ EasyGiven the root of a binary tree, invert the tree, and return its root. &amp;nbsp; Example 1: Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1] Example 2: Input: root = [2,1,3] Output: [2,3,1] Example 3: Input: root = [] Output: [] &amp;nbsp; Constraints: The number of nodes in the tree is in the range [0, 100]. -100 &amp;lt;= Node.val &amp;lt;= 100 題意 將整棵樹</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Scheduler</title>
      <link>https://alanzhan.dev/post/2022-05-16-kubernetes-scheduler/</link>
      <pubDate>Mon, 16 May 2022 22:40:48 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-05-16-kubernetes-scheduler/</guid>
      <description>Scheduler 嚴格算起來，算是特殊的 Controller，工作原理與其他控制器無差別。 Scheduler 的特殊職責在於監控當前集群所有未調度的 Pod，並且獲取當前集群的</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Api Server</title>
      <link>https://alanzhan.dev/post/2022-04-24-kubernetes-api-server/</link>
      <pubDate>Sun, 24 Apr 2022 19:07:12 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-04-24-kubernetes-api-server/</guid>
      <description>API Server kube-apiserver 是 Kubernetes 最重要的核心組件之一，主要提供以下功能： 提供集群管理的 REST API ，包括認證、授權、數據檢驗以及集群狀態變更等 認證 Authentication 授權 Authorization 准入 Admission (Mutating &amp;amp; Valiating) 提供</description>
    </item>
    
    <item>
      <title>Mongodb Index 最佳實踐</title>
      <link>https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/</link>
      <pubDate>Sun, 10 Apr 2022 16:19:10 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/</guid>
      <description>自上一篇在實際的 Porduction 發生了 sorted operation oom 的問題之後，才意識到自己對於 mongodb Index 的掌握度沒有那麼高，於是開始餵關鍵字給 google 查了好久才終於整理出一些重點，有一些重</description>
    </item>
    
    <item>
      <title>MongoDB Sorted Operation OOM</title>
      <link>https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/</link>
      <pubDate>Sun, 20 Mar 2022 15:11:15 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/</guid>
      <description>這篇應該會是難得的從問題反推回去學習的歷程吧，我得好好記錄紀錄。最近我們的 production 發生了 MongoDB 的 sort 操作的限制，具體訊息如下： MongoDB.Driver.MongoCommandException: Command find failed: Encountered non-retryable error during query :: caused by ::</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Etcd</title>
      <link>https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/</link>
      <pubDate>Mon, 28 Feb 2022 15:58:47 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/</guid>
      <description>在任何一個系統中，甚麼東西會是最重要的東西呢？答案其實很簡單 : 資料，所以我就從 Kubernetes 的資料庫 etcd 開始學習起！ 什麼是 etcd 呢 etcd 是 CoreOs 基於 Raft 算法開發的分散式</description>
    </item>
    
    <item>
      <title>安裝兩次的 Kubernetes Kubeadm</title>
      <link>https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/</link>
      <pubDate>Sun, 20 Feb 2022 15:04:19 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/</guid>
      <description>想要透過實戰來更了解 K8s ，所以想先自架 K8s cluster，但目前市面上自建 K8s 的方式越來越多種，可以透過 minikube 、 Kubeadm 等等，想說好吧那我就挑 Kubeadm 來裝看看，但</description>
    </item>
    
    <item>
      <title>Kubernetes 基礎介紹</title>
      <link>https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/</link>
      <pubDate>Mon, 14 Feb 2022 21:48:40 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/</guid>
      <description>終於要來好好深入探討 Kubernetes ，因為 Kubernetes 是基於 golang 這門語言開發的，所以在稍早已經先針對 golang 深度研究了，不過對於 Docker 與 container 技術有經有深入研究過了，小弟就就不針對</description>
    </item>
    
    <item>
      <title>Golang 記憶體管理 GC 全面解析</title>
      <link>https://alanzhan.dev/post/2022-02-13-golang-memory-management/</link>
      <pubDate>Sun, 13 Feb 2022 14:42:09 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-13-golang-memory-management/</guid>
      <description>新的一年又到來了，在這邊祝大家虎頭虎尾，所以這個年還沒過完，我得好好的繼續整理技術文章給大家了，這樣有好的開始！ 上次分析完 Golang Goroutine 與 GMP 原理全面分</description>
    </item>
    
    <item>
      <title>Golang Goroutine 與 GMP 原理全面分析</title>
      <link>https://alanzhan.dev/post/2022-01-24-golang-goroutine/</link>
      <pubDate>Mon, 24 Jan 2022 20:24:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-24-golang-goroutine/</guid>
      <description>最近在研讀 Kubernetes ，所以得好好地跟 golang 這個語言當朋友，看著看著看到了 goroutine ，但是始終不解 goroutine 是哪來幹嘛、為何而生的？所以我們在開始深入認識 goroutine 之前，我們可能</description>
    </item>
    
    <item>
      <title>10 個 Dockerfile 的最佳實踐</title>
      <link>https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/</link>
      <pubDate>Sun, 16 Jan 2022 16:55:15 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/</guid>
      <description>最近剛好在整理 docker 的技術給自己，剛好看到 dockerfile 的最佳實踐，想順手整理上來，不料看到官方已經有最佳實踐了，那我就順手做做翻譯的工作與添增自己的見解。</description>
    </item>
    
    <item>
      <title>Github Pages Custom Domain - Github Blog 自訂域名</title>
      <link>https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/</link>
      <pubDate>Sun, 09 Jan 2022 14:58:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/</guid>
      <description>最近剛好在更換域名，所以順手做一下筆記，也讓大家可以輕鬆上手，設定自己的 Github page 域名。 第一步：購買域名 先去購買自己想要的域名名稱：我是去 Google Domain 購買</description>
    </item>
    
    <item>
      <title>Interpolation Search Algorithm - 插補搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/</link>
      <pubDate>Tue, 13 Jul 2021 21:51:30 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/</guid>
      <description>繼續使用猜數字當範例， 1 ~ 100 的數字，但是這次你已經知道結果了，你如果還是繼續使用二元搜尋法，那麼效率不會那麼好，那我們該用甚麼方式解決呢？ 概</description>
    </item>
    
    <item>
      <title>Jump Search Algorithm - 跳躍搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/</link>
      <pubDate>Sun, 11 Jul 2021 14:48:35 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/</guid>
      <description>延續猜數字遊戲，1 ~ 100 我們是不是可以換個猜法呢？ 如果我們從一開始，只要每次沒猜中，我們就往後面 +10 繼續猜，直到最大值範圍值變成我們所猜的數值後</description>
    </item>
    
    <item>
      <title>Binary Search Algorithm - 二元搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/</link>
      <pubDate>Sat, 10 Jul 2021 22:57:37 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/</guid>
      <description>我們來玩猜數字遊戲，1 ~ 100 中的整數，你必須猜中我腦海中的數字，而且我們必須在最少的布數內猜到答案，那麼你會怎麼猜呢？ 答案很簡單，你一定會從 50</description>
    </item>
    
    <item>
      <title>Linear Search Algorithm - 線性搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/</link>
      <pubDate>Sat, 10 Jul 2021 18:50:40 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/</guid>
      <description>在查找一個元素是否存在的時候，我們最常使用的方式是甚麼呢？答案是 for 或者是 while 迴圈，恭喜你！已經學習完 Linear Search 了！ 概念 線性搜尋 (Linear Search)：這個</description>
    </item>
    
    <item>
      <title>Divide and Conquer - 分而治之</title>
      <link>https://alanzhan.dev/post/2021-07-07-divide-and-conquer/</link>
      <pubDate>Wed, 07 Jul 2021 23:56:34 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-07-divide-and-conquer/</guid>
      <description>分而治之 從字面上看起來，就是把一個複雜的問題分解成兩個或者很多個相同或者相似的問題，讓小問題可以被解決，再將最終結果合併求出問題的答案。 優點</description>
    </item>
    
    <item>
      <title>Big O Notation - Big O 符號</title>
      <link>https://alanzhan.dev/post/2021-07-06-big-o-notation/</link>
      <pubDate>Tue, 06 Jul 2021 23:56:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-06-big-o-notation/</guid>
      <description>如何選擇演算法來解決問題 同一個問題可以用不同的演算法來解決問題，但是選擇哪一個最好？有兩個指標可以評估一個算法的好壞： 時間複雜度 (花的時間)</description>
    </item>
    
    <item>
      <title>Emotional Blackmail - 情緒勒索</title>
      <link>https://alanzhan.dev/post/2021-06-26-emotional-blackmail/</link>
      <pubDate>Sat, 26 Jun 2021 18:46:52 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-06-26-emotional-blackmail/</guid>
      <description>什麼是情緒勒索？ 在探討情緒勒索之前，我們得先搞清楚什麼是情緒勒索？ 情緒勒索者可能在有意識或者無意識當中，使用要求、威脅、施壓、沉默等間接或直</description>
    </item>
    
    <item>
      <title>Atomic Habits - 原子習慣</title>
      <link>https://alanzhan.dev/post/2021-06-13-atomic-habits/</link>
      <pubDate>Sun, 13 Jun 2021 23:45:21 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-06-13-atomic-habits/</guid>
      <description>複利 「複利」這個詞貫穿了整部本書，我們可以說它是世界第八大奇蹟，一點也不為過。 你每天只進步 1% ，持續了之後一年 (1.01 ^ 365 = 37.78)，你將進步 37</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://alanzhan.dev/post/1993-05-13-about-me/</link>
      <pubDate>Thu, 13 May 1993 00:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/1993-05-13-about-me/</guid>
      <description>I have been working as a senior full-stack engineer for 7 years experience. I like to gain new knowledge which can improve my critical thinking and the knowledge can help me solve problems or create value for my work. I hope that my passion can create more products that users love and use.
Experience Opennet • DevOps Engineer • Oct. 2022 ~ Present Playsee • Backend Engineer • Jun. 2022 ~ Sep.</description>
    </item>
    
  </channel>
</rss>
