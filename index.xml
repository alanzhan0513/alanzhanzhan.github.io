<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alan Zhan | 讓我們一起學習成為更好的自己</title>
    <link>https://alanzhan.dev/</link>
    <description>Recent content on Alan Zhan | 讓我們一起學習成為更好的自己</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 10 Apr 2022 16:19:10 +0800</lastBuildDate>
    
	<atom:link href="https://alanzhan.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mongodb Index 最佳實踐</title>
      <link>https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/</link>
      <pubDate>Sun, 10 Apr 2022 16:19:10 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-04-10-mongodb-index-best-practice/</guid>
      <description>自上一篇在實際的 Porduction 發生了 sorted operation oom 的問題之後，才意識到自己對於 mongodb Index 的掌握度沒有那麼高，於是開始餵關鍵字給 google 查了好久才終於整理出一些重點，有一些重</description>
    </item>
    
    <item>
      <title>MongoDB Sorted Operation OOM</title>
      <link>https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/</link>
      <pubDate>Sun, 20 Mar 2022 15:11:15 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-03-20-mongodb-sorted-operation-oom/</guid>
      <description>這篇應該會是難得的從問題反推回去學習的歷程吧，我得好好記錄紀錄。最近我們的 production 發生了 MongoDB 的 sort 操作的限制，具體訊息如下： MongoDB.Driver.MongoCommandException: Command find failed: Encountered non-retryable error during query :: caused by ::</description>
    </item>
    
    <item>
      <title>Kubernetes 核心介紹 Etcd 篇</title>
      <link>https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/</link>
      <pubDate>Mon, 28 Feb 2022 15:58:47 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-28-kubetnetes-etcd/</guid>
      <description>在任何一個系統中，甚麼東西會是最重要的東西呢？答案其實很簡單 : 資料，所以我就從 Kubernetes 的資料庫 etcd 開始學習起！ 什麼是 etcd 呢 etcd 是 CoreOs 基於 Raft 算法開發的分散式</description>
    </item>
    
    <item>
      <title>安裝兩次的 Kubernetes Kubeadm</title>
      <link>https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/</link>
      <pubDate>Sun, 20 Feb 2022 15:04:19 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-20-reinstall-kubernetes-kubeadm/</guid>
      <description>想要透過實戰來更了解 K8s ，所以想先自架 K8s cluster，但目前市面上自建 K8s 的方式越來越多種，可以透過 minikube 、 Kubeadm 等等，想說好吧那我就挑 Kubeadm 來裝看看，但</description>
    </item>
    
    <item>
      <title>Kubernetes 基礎介紹</title>
      <link>https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/</link>
      <pubDate>Mon, 14 Feb 2022 21:48:40 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-14-kubernetes-introduction/</guid>
      <description>終於要來好好深入探討 Kubernetes ，因為 Kubernetes 是基於 golang 這門語言開發的，所以在稍早已經先針對 golang 深度研究了，不過對於 Docker 與 container 技術有經有深入研究過了，小弟就就不針對</description>
    </item>
    
    <item>
      <title>Golang 記憶體管理 GC 全面解析</title>
      <link>https://alanzhan.dev/post/2022-02-13-golang-memory-management/</link>
      <pubDate>Sun, 13 Feb 2022 14:42:09 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-02-13-golang-memory-management/</guid>
      <description>新的一年又到來了，在這邊祝大家虎頭虎尾，所以這個年還沒過完，我得好好的繼續整理技術文章給大家了，這樣有好的開始！ 上次分析完 Golang Goroutine 與 GMP 原理全面分</description>
    </item>
    
    <item>
      <title>Golang Goroutine 與 GMP 原理全面分析</title>
      <link>https://alanzhan.dev/post/2022-01-24-golang-goroutine/</link>
      <pubDate>Mon, 24 Jan 2022 20:24:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-24-golang-goroutine/</guid>
      <description>最近在研讀 Kubernetes ，所以得好好地跟 golang 這個語言當朋友，看著看著看到了 goroutine ，但是始終不解 goroutine 是哪來幹嘛、為何而生的？所以我們在開始深入認識 goroutine 之前，我們可能</description>
    </item>
    
    <item>
      <title>10 個 Dockerfile 的最佳實踐</title>
      <link>https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/</link>
      <pubDate>Sun, 16 Jan 2022 16:55:15 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-16-dockerfile-best-practices/</guid>
      <description>最近剛好在整理 docker 的技術給自己，剛好看到 dockerfile 的最佳實踐，想順手整理上來，不料看到官方已經有最佳實踐了，那我就順手做做翻譯的工作與添增自己的見解。</description>
    </item>
    
    <item>
      <title>Github Pages Custom Domain - Github Blog 自訂域名</title>
      <link>https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/</link>
      <pubDate>Sun, 09 Jan 2022 14:58:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2022-01-09-github-pages-custom-domain/</guid>
      <description>最近剛好在更換域名，所以順手做一下筆記，也讓大家可以輕鬆上手，設定自己的 Github page 域名。 第一步：購買域名 先去購買自己想要的域名名稱：我是去 Google Domain 購買</description>
    </item>
    
    <item>
      <title>Interpolation Search Algorithm - 插補搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/</link>
      <pubDate>Tue, 13 Jul 2021 21:51:30 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-13-interpolation-search-algorithm/</guid>
      <description>繼續使用猜數字當範例， 1 ~ 100 的數字，但是這次你已經知道結果了，你如果還是繼續使用二元搜尋法，那麼效率不會那麼好，那我們該用甚麼方式解決呢？ 概</description>
    </item>
    
    <item>
      <title>Jump Search Algorithm - 跳躍搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/</link>
      <pubDate>Sun, 11 Jul 2021 14:48:35 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-11-jump-search-alogrithm/</guid>
      <description>延續猜數字遊戲，1 ~ 100 我們是不是可以換個猜法呢？ 如果我們從一開始，只要每次沒猜中，我們就往後面 +10 繼續猜，直到最大值範圍值變成我們所猜的數值後</description>
    </item>
    
    <item>
      <title>Binary Search Algorithm - 二元搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/</link>
      <pubDate>Sat, 10 Jul 2021 22:57:37 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-10-binary-search-algorithm/</guid>
      <description>我們來玩猜數字遊戲，1 ~ 100 中的整數，你必須猜中我腦海中的數字，而且我們必須在最少的布數內猜到答案，那麼你會怎麼猜呢？ 答案很簡單，你一定會從 50</description>
    </item>
    
    <item>
      <title>Linear Search Algorithm - 線性搜尋法</title>
      <link>https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/</link>
      <pubDate>Sat, 10 Jul 2021 18:50:40 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-10-linear-search-algorithm/</guid>
      <description>在查找一個元素是否存在的時候，我們最常使用的方式是甚麼呢？答案是 for 或者是 while 迴圈，恭喜你！已經學習完 Linear Search 了！ 概念 線性搜尋 (Linear Search)：這個</description>
    </item>
    
    <item>
      <title>Divide and Conquer - 分而治之</title>
      <link>https://alanzhan.dev/post/2021-07-07-divide-and-conquer/</link>
      <pubDate>Wed, 07 Jul 2021 23:56:34 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-07-divide-and-conquer/</guid>
      <description>分而治之 從字面上看起來，就是把一個複雜的問題分解成兩個或者很多個相同或者相似的問題，讓小問題可以被解決，再將最終結果合併求出問題的答案。 優點</description>
    </item>
    
    <item>
      <title>Big O Notation - Big O 符號</title>
      <link>https://alanzhan.dev/post/2021-07-06-big-o-notation/</link>
      <pubDate>Tue, 06 Jul 2021 23:56:58 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-07-06-big-o-notation/</guid>
      <description>如何選擇演算法來解決問題 同一個問題可以用不同的演算法來解決問題，但是選擇哪一個最好？有兩個指標可以評估一個算法的好壞： 時間複雜度 (花的時間)</description>
    </item>
    
    <item>
      <title>Emotional Blackmail - 情緒勒索</title>
      <link>https://alanzhan.dev/post/2021-06-26-emotional-blackmail/</link>
      <pubDate>Sat, 26 Jun 2021 18:46:52 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-06-26-emotional-blackmail/</guid>
      <description>什麼是情緒勒索？ 在探討情緒勒索之前，我們得先搞清楚什麼是情緒勒索？ 情緒勒索者可能在有意識或者無意識當中，使用要求、威脅、施壓、沉默等間接或直</description>
    </item>
    
    <item>
      <title>Atomic Habits - 原子習慣</title>
      <link>https://alanzhan.dev/post/2021-06-13-atomic-habits/</link>
      <pubDate>Sun, 13 Jun 2021 23:45:21 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/2021-06-13-atomic-habits/</guid>
      <description>複利 「複利」這個詞貫穿了整部本書，我們可以說它是世界第八大奇蹟，一點也不為過。 你每天只進步 1% ，持續了之後一年 (1.01 ^ 365 = 37.78)，你將進步 37</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://alanzhan.dev/post/1993-05-13-about-me/</link>
      <pubDate>Thu, 13 May 1993 00:00:00 +0800</pubDate>
      
      <guid>https://alanzhan.dev/post/1993-05-13-about-me/</guid>
      <description>I have 4-year experience as a software engineer and focus on back-end. In my spare time, I like to gain new knowledge which can improve my critical thinking and the knowledge can help me solve problems or create value for my work. I hope that my passion can create more products that users love and use.
Experience  Higgs • Full Stack Enginner • Apr. 2018 ~ Present ISCOM Online International Information Inc • Software Engineer • Sep.</description>
    </item>
    
  </channel>
</rss>